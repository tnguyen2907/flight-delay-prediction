SELECT
    Year,
    Quarter,
    Month,
    DayofMonth,
    IF(DayOfWeek = 7, 0, DayOfWeek) AS DayOfWeek,
    FlightDate,
    CAST(Holiday AS INT64) AS Holiday,
    AirlineName,
    OriginAirport,
    OriginCity,
    OriginState,
    DestinationAirport,
    DestinationCity,
    DestinationState, 
    IF(EXTRACT(HOUR FROM ScheduledDepartureTimestamp) IS NULL, 0, EXTRACT(HOUR FROM ScheduledDepartureTimestamp)) AS ScheduledDepartureHour,
    CAST(DepartureDelayed AS INT64) AS DepartureDelayed,
    DepartureDelayMinutes,
    TaxiInTime,
    TaxiOutTime,
    TaxiInTime + TaxiOutTime AS TotalTaxiTime,
    ScheduledElapsedTime,
    ActualElapsedTime,
    AirTime,
    CAST(Cancelled AS INT64) AS Cancelled,
    CarrierDelayMinutes,
    WeatherDelayMinutes,
    NASDelayMinutes,
    SecurityDelayMinutes,
    LateAircraftDelayMinutes,
    ROUND(DepartureTemperature, 0) AS DepartureTemperature,
    ROUND(DepartureDewPoint, 0) AS DepartureDewPoint,
    ROUND(DepartureHumidity, 0) AS DepartureHumidity,
    ROUND(DepartureWindSpeed, 0) AS DepartureWindSpeed,
    ROUND(DeparturePrecipitation, 0) AS DeparturePrecipitation,
    ROUND(DeparturePressure, 0) AS DeparturePressure,
    DepartureWeatherCondition,
    CAST(DepartureExtremeWeather AS INT64) AS DepartureExtremeWeather,
    ROUND(ArrivalTemperature, 0) AS ArrivalTemperature,
    ROUND(ArrivalDewPoint, 0) AS ArrivalDewPoint,
    ROUND(ArrivalHumidity, 0) AS ArrivalHumidity,
    ROUND(ArrivalWindSpeed, 0) AS ArrivalWindSpeed,
    ROUND(ArrivalPrecipitation, 0) AS ArrivalPrecipitation,
    ROUND(ArrivalPressure, 0) AS ArrivalPressure,
    ArrivalWeatherCondition,
    CAST(ArrivalExtremeWeather AS INT64) AS ArrivalExtremeWeather,
    IF(IFNULL(WeatherDelayMinutes, 0) > 0, 1, 0) AS WeatherDelayed
FROM
    `{{ params.gcp_project_id }}.flight_delay_pred_dataset.external_gcs`